using System;
using System.Collections.Generic;
using System.Text;

namespace ConsoleTest.MiddleQuestion
{
  /// <summary>
  /// @desc : SmallestRepunitDivByK  
  /// @author :mons
  /// @create : 2019/3/26 17:42:33 
  /// @source : https://leetcode.com/contest/weekly-contest-129/problems/smallest-integer-divisible-by-k/
  /// </summary>
  public class SmallestRepunitDivByK
  {
    private static int[] arr = new int[]
    {
      1, 3, 7, 9, 11, 13, 17, 19, 21,23, 31, 33, 37, 39, 41, 53, 57, 63, 73, 77, 79, 91, 93, 99, 101, 111, 117, 123, 133,
      137, 143, 171, 187, 209, 231, 239, 247, 259, 271, 273, 303, 333, 399, 407, 429, 451, 481, 627, 693, 703, 707, 741,
      777, 803, 813, 819, 1001, 1111, 1147, 1197, 1221, 1241, 1271, 1287, 1313, 1443, 1463, 1507, 1517, 1717, 1729,
      1881, 2109, 2121, 2223, 2329, 2331, 2629, 2717, 2849, 2981, 3003, 3333, 3367, 3441, 3663, 3737, 3813, 3939, 4187,
      4329, 4389, 4551, 4649, 4921, 5187, 5291, 6327, 7373, 7733, 7777, 8151, 8401, 8547, 9009, 9091, 9139, 9191, 9901,
      10001, 10027, 10101, 11111, 11211, 13167, 13651, 13837, 14443, 14763, 15561, 15873, 18887, 19019, 21649, 23199,
      23331, 24453, 25203, 25619, 25641, 26159, 27417, 27573, 29703, 30081, 30303, 33333, 37037, 41107, 43329, 44289,
      47027, 47619, 48581, 51139, 52579, 54131, 57057, 63973, 69307, 69597, 78477, 81103, 82251
    };

    Dictionary<int, int> map = new Dictionary<int, int>()
    {
      {1, 1},
      {3, 3},
      {7, 6},
      {9, 9},
      {11, 2},
      {13, 6},
      {17, 16},
      {19, 18},
      {21, 6},
      {31, 15},
      {33, 6},
      {37, 3},
      {39, 6},
      {41, 5},
      {53, 13},
      {57, 18},
      {63, 18},
      {73, 8},
      {77, 6},
      {79, 13},
      {91, 6},
      {93, 15},
      {99, 18},
      {101, 4},
      {111, 3},
      {117, 18},
      {123, 15},
      {133, 18},
      {137, 8},
      {143, 6},
      {171, 18},
      {187, 16},
      {209, 18},
      {231, 6},
      {239, 7},
      {247, 18},
      {259, 6},
      {271, 5},
      {273, 6},
      {303, 12},
      {333, 9},
      {399, 18},
      {407, 6},
      {429, 6},
      {451, 10},
      {481, 6},
      {627, 18},
      {693, 18},
      {703, 18},
      {707, 12},
      {741, 18},
      {777, 6},
      {803, 8},
      {813, 15},
      {819, 18},
      {1001, 6},
      {1111, 4},
      {1147, 15},
      {1197, 18},
      {1221, 6},
      {1241, 16},
      {1271, 15},
      {1287, 18},
      {1313, 12},
      {1443, 6},
      {1463, 18},
      {1507, 8},
      {1517, 15},
      {1717, 16},
      {1729, 18},
      {1881, 18},
      {2109, 18},
      {2121, 12},
      {2223, 18},
      {2329, 16},
      {2331, 18},
      {2629, 14},
      {2717, 18},
      {2849, 6},
      {2981, 10},
      {3003, 6},
      {3333, 12},
      {3367, 6},
      {3441, 15},
      {3663, 18},
      {3737, 12},
      {3813, 15},
      {3939, 12},
      {4187, 13},
      {4329, 18},
      {4389, 18},
      {4551, 15},
      {4649, 7},
      {4921, 18},
      {5187, 18},
      {5291, 6},
      {6327, 18},
      {7373, 8},
      {7733, 18},
      {7777, 12},
      {8151, 18},
      {8401, 15},
      {8547, 6},
      {9009, 18},
      {9091, 10},
      {9139, 18},
      {9191, 12},
      {9901, 12},
      {10001, 8},
      {10027, 15},
      {10101, 6},
      {11111, 5},
      {11211, 12},
      {13167, 18},
      {13651, 16},
      {13837, 8},
      {14443, 12},
      {14763, 18},
      {15561, 18},
      {15873, 6},
      {18887, 16},
      {19019, 18},
      {21649, 11},
      {23199, 18},
      {23331, 12},
      {24453, 18},
      {25203, 15},
      {25619, 16},
      {25641, 18},
      {26159, 12},
      {27417, 18},
      {27573, 12},
      {29703, 12},
      {30081, 15},
      {30303, 18},
      {33333, 15},
      {37037, 6},
      {41107, 12},
      {43329, 12},
      {44289, 18},
      {47027, 15},
      {47619, 18},
      {48581, 12},
      {51139, 14},
      {52579, 18},
      {54131, 18},
      {57057, 18},
      {63973, 18},
      {69307, 12},
      {69597, 18},
      {78477, 12},
      {81103, 8},
      {82251, 18}
    };

    public int Solution(int K)
    {
      if (K % 2 == 0 || K % 5 == 0) return -1;

      long num = 1;
      var count = 1;
      while (num > 0)
      {
        if (num % K == 0) return count;
        count++;
        num = num * 10 + 1;
      }

      return -1;
    }

    public IList<long> list = new List<long>();

    public Dictionary<int, int> Dictionary = new Dictionary<int, int>();

    public void Test(long num)
    {
      for (var i = 1; i < 100000; i += 2)
        if (num % i == 0)
        {
          if (!Dictionary.ContainsKey(i))
            Dictionary.Add(i, num.ToString().Length);
          Console.WriteLine($"i:{i},num:{num},len:{num.ToString().Length}");
          list.Add(i);
        }
    }
  }
}